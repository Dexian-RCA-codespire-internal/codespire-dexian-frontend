# Full Stack Docker Compose
# This file orchestrates both frontend and backend applications with all dependencies

services:
  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: codespire-fullstack-frontend
    restart: unless-stopped
    ports:
      - "3001:80"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://rca-sit.codespiresolutions.cloud/api/v1
      - VITE_BACKEND_URL=https://rca-sit.codespiresolutions.cloud
      - VITE_APP_NAME=Dexian RCA
      - VITE_APP_VERSION=1.0.0
    networks:
      - web
      - codespire-network
    depends_on:
      backend:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rca-sit.rule=Host(`rca-sit.codespiresolutions.cloud`)"
      - "traefik.http.routers.rca-sit.entrypoints=websecure"
      - "traefik.http.routers.rca-sit.tls.certresolver=letsencrypt"
      - "traefik.http.services.rca-sit.loadbalancer.server.port=80"

  # Backend Application
  backend:
    build:
      context: ../codespire-dexian-backend
      dockerfile: Dockerfile
    container_name: codespire-fullstack-backend
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=production
      - PORT=8081
      - MONGODB_URI=mongodb://mongodb:27017/dexian-backend
      - TICKET_DATABASE_URL=mongodb://mongodb:27017/dexian-backend
      - SUPERTOKENS_CONNECTION_URI=http://supertokens:3567
      - SUPERTOKENS_API_KEY=your-super-secret-api-key-here
      - SUPERTOKENS_APP_NAME=test-bg
      - SUPERTOKENS_API_DOMAIN=https://rca-sit.codespiresolutions.cloud
      - SUPERTOKENS_APP_DOMAIN=https://rca-sit.codespiresolutions.cloud
      - POSTGRES_USER=supertokens
      - POSTGRES_PASSWORD=supertokens123
      - POSTGRES_DB=supertokens
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_API_KEY=
      - QDRANT_LOG_LEVEL=INFO
      - ENABLE_QDRANT=true
      - FRONTEND_URL=https://rca-sit.codespiresolutions.cloud
      - CORS_ORIGINS=https://rca-sit.codespiresolutions.cloud
      # Email Configuration (for OTP/Magic Link emails)
      - EMAIL_SERVICE=gmail
      - EMAIL_HOST=smtp-mail.outlook.com
      - EMAIL_PORT=587
      - EMAIL_USER=pramod@codespiresolutions.com
      - EMAIL_PASSWORD=sswyyhytchrsfckf
      - EMAIL_FROM=pramod@codespiresolutions.com
      # SMTP Configuration (for email service)
      - SMTP_HOST=smtp-mail.outlook.com
      - SMTP_PORT=587
      - SMTP_USER=pramod@codespiresolutions.com
      - SMTP_PASSWORD=sswyyhytchrsfckf
      - SMTP_FROM_EMAIL=pramod@codespiresolutions.com
      - SMTP_FROM_NAME=pramod
      # Email Branding Configuration
      - EMAIL_COMPANY_NAME=Dexian
      - EMAIL_SUPPORT_EMAIL=support@yourcompany.com
      - EMAIL_LOGO_URL=https://rca-sit.codespiresolutions.cloud/public/email-asset/logo.png
      - EMAIL_LOGO_ALT=Dexian
      - EMAIL_LOGO_WIDTH=120
      - EMAIL_LOGO_HEIGHT=40
      # OTP Configuration
      - OTP_EXPIRY_MINUTES=10
      - OTP_LENGTH=6
      # ServiceNow Configuration
      - SERVICENOW_URL=https://dev283514.service-now.com
      - SERVICENOW_USERNAME=abel.tuter
      - SERVICENOW_PASSWORD=Sagar@2003
      - SERVICENOW_ENABLE_POLLING=true
      - SERVICENOW_ENABLE_BULK_IMPORT=true
      - MAX_RECORDS=50
      # Security
      - SESSION_SECRET=change-this-secret-key-in-production
      - JWT_SECRET=change-this-jwt-secret-in-production
      # API Keys (Optional - for AI features)
      - OPENAI_API_KEY=
      - ANTHROPIC_API_KEY=
      - GOOGLE_API_KEY=AIzaSyBA643TyzxONg2hHphKp-9hSHffh7eQqck
      - GEMINI_API_KEY=AIzaSyBA643TyzxONg2hHphKp-9hSHffh7eQqck
      # Gemini/LLM Configuration
      - GEMINI_MODEL=gemini-2.0-flash
      - GEMINI_EMBEDDING_MODEL=text-embedding-004
      - GEMINI_TEMPERATURE=0.1
      - GEMINI_MAX_TOKENS=2048
      # AWS Configuration (Optional)
      - AWS_ACCESS_KEY_ID=your-aws-access-key-id
      - AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key
      - AWS_REGION=us-east-1
      - AWS_S3_BUCKET_NAME=your-bucket-name
      # SLA Monitoring Configuration
      - SLA_MONITORING_INTERVAL=*/1 * * * *
      - SLA_P1_HOURS=4
      - SLA_P2_HOURS=12
      - SLA_P3_HOURS=24
      - SLA_WARNING_THRESHOLD=20
      - SLA_CRITICAL_THRESHOLD=60
      - SLA_MONITORING_ENABLED=true
      - SLA_IGNORE_STATUS_FILTER=true
      # Logging Configuration
      - LOG_LEVEL=info
      - LOG_FILE=./logs/app.log
      # Security Configuration
      - BCRYPT_SALT_ROUNDS=10
    volumes:
      - ../codespire-dexian-backend/uploads:/app/uploads
      - ../codespire-dexian-backend/logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
      supertokens:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - web
      - codespire-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8081/api/v1/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rca-api.rule=Host(`rca-sit.codespiresolutions.cloud`) && PathPrefix(`/api`)"
      - "traefik.http.routers.rca-api.entrypoints=websecure"
      - "traefik.http.routers.rca-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.rca-api.loadbalancer.server.port=8081"

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: codespire-fullstack-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - codespire-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for SuperTokens
  postgres:
    image: postgres:15-alpine
    container_name: codespire-fullstack-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-supertokens}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-supertokens123}
      POSTGRES_DB: ${POSTGRES_DB:-supertokens}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - codespire-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-supertokens}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SuperTokens Core
  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:7.0
    container_name: codespire-fullstack-supertokens
    restart: unless-stopped
    environment:
      POSTGRESQL_CONNECTION_URI: postgresql://${POSTGRES_USER:-supertokens}:${POSTGRES_PASSWORD:-supertokens123}@postgres:5432/${POSTGRES_DB:-supertokens}
    ports:
      - "3567:3567"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - codespire-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3567/hello"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: codespire-fullstack-qdrant
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: ${QDRANT_LOG_LEVEL:-INFO}
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - codespire-network
    healthcheck:
      test: ["CMD", "timeout", "10s", "bash", "-c", ":> /dev/tcp/127.0.0.1/6333"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mongodb_data:
    driver: local
  postgres_data:
    driver: local
  qdrant_data:
    driver: local

networks:
  codespire-network:
    driver: bridge
  web:
    external: true
